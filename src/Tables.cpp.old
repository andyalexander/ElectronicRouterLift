#include "Tables.h"


//
// INCH THREAD DEFINITIONS
//
// Each row in the table defines a standard imperial thread, with the display data,
// LED indicator states and gear ratio fraction to use.
//
#define TPI_NUMERATOR(tpi) ((uint32_t)LEADSCREW_TPI*STEPPER_RESOLUTION*STEPPER_MICROSTEPS*10)

const FEED_THREAD inch_thread_table[] =
{
 { "   8",  LED_THREAD | LED_TPI, TPI_FRACTION(80) },
 { "   9",   LED_THREAD | LED_TPI, TPI_FRACTION(90) },
 { "  10",   LED_THREAD | LED_TPI, TPI_FRACTION(100) },
 { "  11",    LED_THREAD | LED_TPI, TPI_FRACTION(110) },
 { " 11.5",  LED_THREAD | LED_TPI, TPI_FRACTION(115) },
 { "  12",    LED_THREAD | LED_TPI, TPI_FRACTION(120) },
 { "  13",  LED_THREAD | LED_TPI, TPI_FRACTION(130) },
 { "  14",   LED_THREAD | LED_TPI, TPI_FRACTION(140) },
 { "  16",    LED_THREAD | LED_TPI, TPI_FRACTION(160) },
 { "  18",  LED_THREAD | LED_TPI, TPI_FRACTION(180) },
 { "  19",   LED_THREAD | LED_TPI, TPI_FRACTION(190) },
 { "  20",   LED_THREAD | LED_TPI, TPI_FRACTION(200) },
 { "  24",   LED_THREAD | LED_TPI, TPI_FRACTION(240) },
 { "  26",    LED_THREAD | LED_TPI, TPI_FRACTION(260) },
 { "  27",  LED_THREAD | LED_TPI, TPI_FRACTION(270) },
 { "  28",  LED_THREAD | LED_TPI, TPI_FRACTION(280) },
 { "  32",    LED_THREAD | LED_TPI, TPI_FRACTION(320) },
 { "  36",    LED_THREAD | LED_TPI, TPI_FRACTION(360) },
 { "  40",   LED_THREAD | LED_TPI, TPI_FRACTION(400) },
 { "  44",   LED_THREAD | LED_TPI, TPI_FRACTION(440) },
 { "  48",  LED_THREAD | LED_TPI, TPI_FRACTION(480) },
 { "  56",    LED_THREAD | LED_TPI, TPI_FRACTION(560) },
 { "  64",   LED_THREAD | LED_TPI, TPI_FRACTION(640) },
 { "  72",    LED_THREAD | LED_TPI, TPI_FRACTION(720) },
 { "  80",   LED_THREAD | LED_TPI, TPI_FRACTION(800) },
};



//
// INCH FEED DEFINITIONS
//
// Each row in the table defines a standard imperial feed rate, with the display data,
// LED indicator states and gear ratio fraction to use.
//

#define THOU_IN_NUMERATOR(thou) ((uint32_t)thou*LEADSCREW_TPI*STEPPER_RESOLUTION*STEPPER_MICROSTEPS)


const FEED_THREAD empty_feed_table[] = {{"", LED_POWER, THOU_IN_FRACTION(0)}};

const FEED_THREAD inch_feed_table[] =
{
 { "0.001",     LED_FEED | LED_INCH, THOU_IN_FRACTION(1) },
 { "0.002",     LED_FEED | LED_INCH, THOU_IN_FRACTION(2) },
 { "0.003",   LED_FEED | LED_INCH, THOU_IN_FRACTION(3) },
 { "0.004",    LED_FEED | LED_INCH, THOU_IN_FRACTION(4) },
 { "0.005",    LED_FEED | LED_INCH, THOU_IN_FRACTION(5) },
 { "0.006",     LED_FEED | LED_INCH, THOU_IN_FRACTION(6) },
 { "0.007",   LED_FEED | LED_INCH, THOU_IN_FRACTION(7) },
 { "0.008",   LED_FEED | LED_INCH, THOU_IN_FRACTION(8) },
 { "0.009",    LED_FEED | LED_INCH, THOU_IN_FRACTION(9) },
 { "0.010",    LED_FEED | LED_INCH, THOU_IN_FRACTION(10) },
 { "0.011",     LED_FEED | LED_INCH, THOU_IN_FRACTION(11) },
 { "0.012",     LED_FEED | LED_INCH, THOU_IN_FRACTION(12) },
 { "0.013",   LED_FEED | LED_INCH, THOU_IN_FRACTION(13) },
 { "0.015",    LED_FEED | LED_INCH, THOU_IN_FRACTION(15) },
 { "0.017",   LED_FEED | LED_INCH, THOU_IN_FRACTION(17) },
 { "0.020",    LED_FEED | LED_INCH, THOU_IN_FRACTION(20) },
 { "0.023",   LED_FEED | LED_INCH, THOU_IN_FRACTION(23) },
 { "0.026",     LED_FEED | LED_INCH, THOU_IN_FRACTION(26) },
 { "0.030",    LED_FEED | LED_INCH, THOU_IN_FRACTION(30) },
 { "0.035",    LED_FEED | LED_INCH, THOU_IN_FRACTION(35) },
 { "0.040",    LED_FEED | LED_INCH, THOU_IN_FRACTION(40) },
};






FeedTable::FeedTable(const FEED_THREAD *table, uint16_t numRows, uint16_t defaultSelection)
{
    this->table = table;
    this->numRows = numRows;
    this->selectedRow = defaultSelection;
}

const FEED_THREAD *FeedTable :: current(void)
{
    return &table[selectedRow];
}

const FEED_THREAD *FeedTable :: next(void)
{
    if( this->selectedRow < this->numRows - 1 )
    {
        this->selectedRow++;
    }
    return this->current();
}

const FEED_THREAD *FeedTable :: previous(void)
{
    if( this->selectedRow > 0 )
    {
        this->selectedRow--;
    }
    return this->current();
}

FeedTableFactory::FeedTableFactory(void):
        emptyFeeds(empty_feed_table,0,0),
        inchThreads(inch_thread_table, sizeof(inch_thread_table)/sizeof(inch_thread_table[0]), 12),
        inchFeeds(inch_feed_table, sizeof(inch_feed_table)/sizeof(inch_feed_table[0]), 4)
{
}

FeedTable *FeedTableFactory::getFeedTable(bool metric, bool thread)
{    
    if( thread )
    {
        return &this->inchThreads;
    }
    else
    {
        return &this->inchFeeds;
    }
}

FeedTable *FeedTableFactory::getEmptyFeedTable()
{
    return &this->emptyFeeds;
}
